import * as anchor from "@project-serum/anchor";
import { Program } from "@project-serum/anchor";
import assert from "assert";

import { Pool } from "../target/types/pool";

describe("pool", () => {
  anchor.setProvider(anchor.Provider.env());

  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  const program = anchor.workspace.Pool as Program<Pool>;

  // PDA generated by the characters-program.
  // https://github.com/vivendell/solana-programs/tree/main/characters-program
  const user = new anchor.web3.PublicKey(
    "5rEfo4VjDeGoTvsSwcu9ggNtQfq3KcLcJ5VFbmnkptZQ"
  );

  // Static seed for generating the pool account.
  const stateSeed = Buffer.from("state_seed");

  let stateAccount: anchor.web3.PublicKey;
  anchor.web3.PublicKey.findProgramAddress([stateSeed], program.programId).then(
    (val) => {
      stateAccount = val[0];
    }
  );

  it("Initializes the pool.", async () => {
    const poolCapacity = 10;
    const tx = await program.rpc.initialize(poolCapacity, {
      accounts: {
        state: stateAccount,
        payer: program.provider.wallet.publicKey,
        systemProgram: anchor.web3.SystemProgram.programId,
      },
    });

    console.log("Pool account:", stateAccount.toBase58());
    console.log("Your transaction signature:", tx);
  });

  it("Pushes a new member to the pool.", async () => {
    await program.rpc.join({
      accounts: {
        state: stateAccount,
        userAccount: user,
      },
    });

    const state = await program.account.programState.fetch(stateAccount);

    assert.deepEqual(state.members.length, 1);
    assert.deepEqual(state.members[0], user);
  });

  it("Takes a member from the pool.", async () => {
    await program.rpc.take({
      accounts: {
        state: stateAccount,
        userAccount: user,
      },
    });

    const state = await program.account.programState.fetch(stateAccount);

    assert.deepEqual(state.members.length, 0);
  });

  it("Closes the pool.", async () => {
    await program.rpc.close({
      accounts: {
        state: stateAccount,
        receiver: program.provider.wallet.publicKey,
      },
    });

    try {
      await program.account.programState.fetch(stateAccount);
      assert(false);
    } catch (err) {
      assert(err.toString().includes("Account does not exist"));
    }
  });
});
